#-------------------------------------------------------------------------------
# Copyright (c) 2023-2024 Cypress Semiconductor Corporation (an Infineon company)
# or an affiliate of Cypress Semiconductor Corporation. All rights reserved.
#
# SPDX-License-Identifier: BSD-3-Clause
#
#-------------------------------------------------------------------------------

#################################### Tools #####################################

if(IFX_MTB_BUILD)
    # In MTB case generated sources are generated by MTB thus path to them must
    # be provided.
    if(NOT DEFINED IFX_BSP_GENERATED_FILES_OUTPUT_PATH)
        message(FATAL_ERROR "Path to generated sources (IFX_BSP_GENERATED_FILES_OUTPUT_PATH) must be provided!")
    endif()
else()
    if(DEFINED CY_TOOLS_DIR)
        # Nothing to do as CY_TOOLS_DIR is set from command line (command line
        # arguments are CACHE)
    elseif(DEFINED ENV{CY_TOOLS_DIR})
        # Use CY_TOOLS_DIR from environment variables
        set(CY_TOOLS_DIR "$ENV{CY_TOOLS_DIR}" CACHE PATH "Path to MTB tools.")
    elseif(DEFINED ENV{CY_IDE_TOOLS_DIR})
        # Use CY_IDE_TOOLS_DIR from environment variables
        set(CY_TOOLS_DIR "$ENV{CY_IDE_TOOLS_DIR}" CACHE PATH "Path to MTB tools.")
    else()
        # Lookup for MTB Tools using predefined location
        file(GLOB CY_TOOLS_PATHS
            "$ENV{SYSTEMDRIVE}/Infineon/Tools/ModusToolbox/tools_*"
            "$ENV{CY_WIN_HOME}/ModusToolbox/tools_*"
            "/opt/Tools/ModusToolbox/tools_*"
            "$ENV{HOME}/ModusToolbox/tools_*"
            "/Applications/ModusToolbox/tools_*")
        if(CY_TOOLS_PATHS)
            # Use first item
            list(GET CY_TOOLS_PATHS 0 CY_TOOLS_DIR)
            string(REPLACE "\\" "/" CY_TOOLS_DIR ${CY_TOOLS_DIR})
            string(REGEX REPLACE ".+/tools_([0-9]+\.[0-9])+$" "\\1" __CY_TOOLS_VERSION ${CY_TOOLS_DIR})
            # Sort by tools version
            foreach(__TEST_TOOLS_PATH IN LISTS CY_TOOLS_PATHS)
                string(REPLACE "\\" "/" __TEST_TOOLS_PATH ${__TEST_TOOLS_PATH})
                string(REGEX REPLACE ".+/tools_([0-9]+\.[0-9])+$" "\\1" __TEST_TOOLS_VERSION ${__TEST_TOOLS_PATH})
                if(${__CY_TOOLS_VERSION} VERSION_LESS_EQUAL ${__TEST_TOOLS_VERSION})
                    set(CY_TOOLS_DIR ${__TEST_TOOLS_PATH})
                    set(__CY_TOOLS_VERSION ${__TEST_TOOLS_VERSION})
                endif()
            endforeach()
            message("Found MTB Tools ${__CY_TOOLS_VERSION} in ${CY_TOOLS_DIR}")
        else()
            # Error out if CY_TOOLS_DIR is not present.
            message(FATAL_ERROR "CY_TOOLS_DIR is not set. Please provide it in command line or as an environment variable!")
        endif()
    endif()
    set(IFX_BSP_GENERATED_FILES_OUTPUT_PATH "${IFX_GENERATED_DIR}/generated_sources"   CACHE PATH "BSP code generation output directory.")

    set(IFX_DEVICE_CONFIGURATOR_CLI_EXECUTABLE "${CY_TOOLS_DIR}/device-configurator/device-configurator-cli" CACHE PATH "Path to ModusToolbox Device Configurator CLI.")
    set(IFX_QSPI_CONFIGURATOR_CLI_EXECUTABLE   "${CY_TOOLS_DIR}/qspi-configurator/qspi-configurator-cli"     CACHE PATH "Path to ModusToolbox QSPI Configurator CLI.")
endif()

# Generate BSP sources
#
# GENERATED_LIST - variable name that receives list of generated sources
function(ifx_generate_sources)
    # Parse arguments
    set(options "")
    set(oneValueArgs GENERATED_LIST)
    set(multiValueArgs  "")
    cmake_parse_arguments(ARG "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})

    # Sources generation is only needed for stand alone build. In MTB build, sources
    # generation is handled by MTB.
    if(NOT IFX_MTB_BUILD)
        if(DEFINED IFX_DEV_SUPPORT_LIB_PATH AND EXISTS ${IFX_DEV_SUPPORT_LIB_PATH})
            set(IFX_BSP_DEVICE_SUPPORT_LIBRARIES    "${IFX_DEV_SUPPORT_LIB_PATH}/props.json,${IFX_DEVICE_DB_LIB_PATH}/props.json" CACHE STRING "Comma separated list of path(s) to the device support libraries.")
        else()
            set(IFX_BSP_DEVICE_SUPPORT_LIBRARIES    "${IFX_PDL_LIB_PATH}/props.json,${IFX_DEVICE_DB_LIB_PATH}/props.json" CACHE STRING "Comma separated list of path(s) to the device support libraries.")
        endif()
        # Transform libraries list from MTB format to CMake list format
        string(REPLACE "," ";" IFX_BSP_DEVICE_SUPPORT_LIBRARIES_LIST ${IFX_BSP_DEVICE_SUPPORT_LIBRARIES})

        if (NOT IFX__BSP_SOURCE_GENERATED)
            # Generate BSP sources before continuing to allow source discovery
            execute_process(
                COMMAND ${IFX_DEVICE_CONFIGURATOR_CLI_EXECUTABLE}
                            --build ${IFX_BSP_DESIGN_FILE_PATH}
                            --library ${IFX_BSP_DEVICE_SUPPORT_LIBRARIES}
                            -o ${IFX_BSP_GENERATED_FILES_OUTPUT_PATH}
                WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
                RESULT_VARIABLE RET
            )

            if(NOT RET EQUAL 0)
                message(FATAL_ERROR "Failed to generate BSP sources!")
            endif()

            # Use cache variable to skip execute_process
            set(IFX__BSP_SOURCE_GENERATED ON CACHE BOOL "Used to check if BSP sources are generated" FORCE)
        endif()

        # Return list of generated files
        file(GLOB_RECURSE __C_SOURCES LIST_DIRECTORIES false "${IFX_BSP_GENERATED_FILES_OUTPUT_PATH}/*.c")
        file(GLOB_RECURSE __H_SOURCES LIST_DIRECTORIES false "${IFX_BSP_GENERATED_FILES_OUTPUT_PATH}/*.h")
        set(${ARG_GENERATED_LIST} ${__C_SOURCES} ${__H_SOURCES} PARENT_SCOPE)

        # Generate BSP sources using Device Configurator
        add_custom_command(
            OUTPUT  ${__C_SOURCES} ${__H_SOURCES}
            # touch_nocreate output files to update timestamp to prevent unnecessary regenerations
            COMMAND ${CMAKE_COMMAND} -E touch_nocreate ${__C_SOURCES} ${__H_SOURCES}
            COMMAND ${IFX_DEVICE_CONFIGURATOR_CLI_EXECUTABLE}
                        --build ${IFX_BSP_DESIGN_FILE_PATH}
                        --library ${IFX_BSP_DEVICE_SUPPORT_LIBRARIES}
                        -o ${IFX_BSP_GENERATED_FILES_OUTPUT_PATH}
                        # Use --readonly so device configurator does not modify
                        # timestamp of input files (this prevents unnecessary
                        # regenerations)
                        --readonly
            DEPENDS ${IFX_BSP_DESIGN_FILE_PATH}
                    ${IFX_BSP_QSPI_DESIGN_FILE_PATH}
                    ${IFX_BSP_DEVICE_SUPPORT_LIBRARIES_LIST}
        )
    endif()
endfunction()
